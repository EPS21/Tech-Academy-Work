
@model ScheduleUsers.Models.TimeOffEvent



@using(Ajax.BeginForm("Create", "TimeOffEvent", new AjaxOptions { HttpMethod = "POST", OnSuccess = "reloadPage"}))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Please enter your request below.</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Start, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Start, new { htmlAttributes = new { @class = "form-control date-picker" } })
                @Html.ValidationMessageFor(model => model.Start, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.End, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.End, new { htmlAttributes = new { @class = "form-control date-picker" } })
                @Html.ValidationMessageFor(model => model.End, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-1 col-md-10">
                <input type="submit" value="Submit" class="btn btn-default" />
            </div>
        </div>
    </div>


}


<script type="text/javascript">
        function reloadPage() {
            document.location.reload(true);
        }
</script>


<script type="text/javascript">
    $(function () {
        $("#Start").datetimepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: "-5:+5",
            dateFormat: 'dd-M-yy',
            controlType: 'select',
            timeFormat: 'hh:mm TT',
            // This function sets the earliest date allowed for end date to ensure
            // no negative time vacations
            onSelect: function (dateTime, inst) {
                $('#End').datepicker("change", { minDate: dateTime });
            }
        });

    });
    $(function () {
        $("#End").datetimepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: "-5:+5",
            dateFormat: 'dd-M-yy',
            controlType: 'select',
            timeFormat: 'hh:mm TT'
        });

    });
    jQuery.validator.methods.date = function (value, element) {
        var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
        if (isChrome) {
            var d = new Date();
            return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
        } else {
            return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
        }

    };


</script>